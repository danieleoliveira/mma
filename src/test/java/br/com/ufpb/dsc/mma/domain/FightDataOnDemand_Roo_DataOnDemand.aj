// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.ufpb.dsc.mma.domain;

import br.com.ufpb.dsc.mma.domain.Fight;
import br.com.ufpb.dsc.mma.domain.FightDataOnDemand;
import br.com.ufpb.dsc.mma.domain.FighterDataOnDemand;
import br.com.ufpb.dsc.mma.persistence.FightRepository;
import br.com.ufpb.dsc.mma.service.FightService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect FightDataOnDemand_Roo_DataOnDemand {
    
    declare @type: FightDataOnDemand: @Component;
    
    private Random FightDataOnDemand.rnd = new SecureRandom();
    
    private List<Fight> FightDataOnDemand.data;
    
    @Autowired
    FighterDataOnDemand FightDataOnDemand.fighterDataOnDemand;
    
    @Autowired
    FightService FightDataOnDemand.fightService;
    
    @Autowired
    FightRepository FightDataOnDemand.fightRepository;
    
    public Fight FightDataOnDemand.getNewTransientFight(int index) {
        Fight obj = new Fight();
        setFightDateAndTime(obj, index);
        setPlace(obj, index);
        return obj;
    }
    
    public void FightDataOnDemand.setFightDateAndTime(Fight obj, int index) {
        Date fightDateAndTime = new Date(new Date().getTime() + 10000000L);
        obj.setFightDateAndTime(fightDateAndTime);
    }
    
    public void FightDataOnDemand.setPlace(Fight obj, int index) {
        String place = "place_" + index;
        obj.setPlace(place);
    }
    
    public Fight FightDataOnDemand.getSpecificFight(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Fight obj = data.get(index);
        Long id = obj.getId();
        return fightService.findFight(id);
    }
    
    public Fight FightDataOnDemand.getRandomFight() {
        init();
        Fight obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return fightService.findFight(id);
    }
    
    public boolean FightDataOnDemand.modifyFight(Fight obj) {
        return false;
    }
    
    public void FightDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = fightService.findFightEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Fight' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Fight>();
        for (int i = 0; i < 10; i++) {
            Fight obj = getNewTransientFight(i);
            try {
                fightService.saveFight(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            fightRepository.flush();
            data.add(obj);
        }
    }
    
}
