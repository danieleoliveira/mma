// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.ufpb.dsc.mma.domain;

import br.com.ufpb.dsc.mma.domain.CategoryDataOnDemand;
import br.com.ufpb.dsc.mma.domain.Fighter;
import br.com.ufpb.dsc.mma.domain.FighterDataOnDemand;
import br.com.ufpb.dsc.mma.persistence.FighterRepository;
import br.com.ufpb.dsc.mma.service.FighterService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect FighterDataOnDemand_Roo_DataOnDemand {
    
    declare @type: FighterDataOnDemand: @Component;
    
    private Random FighterDataOnDemand.rnd = new SecureRandom();
    
    private List<Fighter> FighterDataOnDemand.data;
    
    @Autowired
    CategoryDataOnDemand FighterDataOnDemand.categoryDataOnDemand;
    
    @Autowired
    FighterService FighterDataOnDemand.fighterService;
    
    @Autowired
    FighterRepository FighterDataOnDemand.fighterRepository;
    
    public Fighter FighterDataOnDemand.getNewTransientFighter(int index) {
        Fighter obj = new Fighter();
        setAge(obj, index);
        setHeight(obj, index);
        setName(obj, index);
        setWeight(obj, index);
        return obj;
    }
    
    public void FighterDataOnDemand.setAge(Fighter obj, int index) {
        int age = index;
        if (age < 21) {
            age = 21;
        }
        obj.setAge(age);
    }
    
    public void FighterDataOnDemand.setHeight(Fighter obj, int index) {
        float height = new Integer(index).floatValue();
        obj.setHeight(height);
    }
    
    public void FighterDataOnDemand.setName(Fighter obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void FighterDataOnDemand.setWeight(Fighter obj, int index) {
        float weight = new Integer(index).floatValue();
        obj.setWeight(weight);
    }
    
    public Fighter FighterDataOnDemand.getSpecificFighter(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Fighter obj = data.get(index);
        Long id = obj.getId();
        return fighterService.findFighter(id);
    }
    
    public Fighter FighterDataOnDemand.getRandomFighter() {
        init();
        Fighter obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return fighterService.findFighter(id);
    }
    
    public boolean FighterDataOnDemand.modifyFighter(Fighter obj) {
        return false;
    }
    
    public void FighterDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = fighterService.findFighterEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Fighter' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Fighter>();
        for (int i = 0; i < 10; i++) {
            Fighter obj = getNewTransientFighter(i);
            try {
                fighterService.saveFighter(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            fighterRepository.flush();
            data.add(obj);
        }
    }
    
}
